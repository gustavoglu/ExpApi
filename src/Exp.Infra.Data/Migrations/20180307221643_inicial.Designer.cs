// <auto-generated />
using Exp.Domain.Enums;
using Exp.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace Exp.Infra.Data.Migrations
{
    [DbContext(typeof(ContextSQLS))]
    [Migration("20180307221643_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Exp.Domain.Models.Conta", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Documento");

                    b.Property<string>("Email");

                    b.Property<Guid>("Id_contaTipo");

                    b.Property<string>("Nome");

                    b.Property<string>("Telefone");

                    b.Property<string>("TelefoneAdicional");

                    b.Property<int?>("TipoDocumento");

                    b.HasKey("Id");

                    b.HasIndex("Id_contaTipo");

                    b.ToTable("Contas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Conta");
                });

            modelBuilder.Entity("Exp.Domain.Models.ContaContato", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<string>("Email");

                    b.Property<string>("Funcao");

                    b.Property<Guid>("Id_conta");

                    b.Property<string>("Nome");

                    b.Property<string>("Observacoes");

                    b.Property<string>("Telefone");

                    b.Property<string>("TelefoneAdicional");

                    b.HasKey("Id");

                    b.HasIndex("Id_conta");

                    b.ToTable("ContaContatos");
                });

            modelBuilder.Entity("Exp.Domain.Models.ContaEndereco", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<string>("Bairro");

                    b.Property<string>("Cidade");

                    b.Property<string>("Complemento");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<string>("Estado");

                    b.Property<Guid>("Id_conta");

                    b.Property<string>("Numero");

                    b.Property<string>("Pais");

                    b.Property<string>("Rua");

                    b.HasKey("Id");

                    b.HasIndex("Id_conta");

                    b.ToTable("ContaEnderecos");
                });

            modelBuilder.Entity("Exp.Domain.Models.ContaTipo", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("ContaTipos");
                });

            modelBuilder.Entity("Exp.Domain.Models.Cliente", b =>
                {
                    b.HasBaseType("Exp.Domain.Models.Conta");

                    b.Property<string>("RazaoSocial");

                    b.ToTable("Cliente");

                    b.HasDiscriminator().HasValue("Cliente");
                });

            modelBuilder.Entity("Exp.Domain.Models.Colaborador", b =>
                {
                    b.HasBaseType("Exp.Domain.Models.Conta");

                    b.Property<string>("Departamento");

                    b.Property<string>("Funcao");

                    b.Property<Guid?>("Id_cliente");

                    b.Property<string>("Sobrenome");

                    b.HasIndex("Id_cliente");

                    b.ToTable("Colaborador");

                    b.HasDiscriminator().HasValue("Colaborador");
                });

            modelBuilder.Entity("Exp.Domain.Models.Conta", b =>
                {
                    b.HasOne("Exp.Domain.Models.ContaTipo", "ContaTipo")
                        .WithMany("Contas")
                        .HasForeignKey("Id_contaTipo")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Exp.Domain.Models.ContaContato", b =>
                {
                    b.HasOne("Exp.Domain.Models.Conta", "Conta")
                        .WithMany("Contatos")
                        .HasForeignKey("Id_conta")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exp.Domain.Models.ContaEndereco", b =>
                {
                    b.HasOne("Exp.Domain.Models.Conta", "Conta")
                        .WithMany("Enderecos")
                        .HasForeignKey("Id_conta")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exp.Domain.Models.Colaborador", b =>
                {
                    b.HasOne("Exp.Domain.Models.Cliente", "Cliente")
                        .WithMany("Colaboradores")
                        .HasForeignKey("Id_cliente")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
